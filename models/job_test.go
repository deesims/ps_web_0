// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testJobs(t *testing.T) {
	t.Parallel()

	query := Jobs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testJobsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = job.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJobsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Jobs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJobsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := JobSlice{job}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testJobsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := JobExists(tx, job.JobID)
	if err != nil {
		t.Errorf("Unable to check if Job exists: %s", err)
	}
	if !e {
		t.Errorf("Expected JobExistsG to return true, but got false.")
	}
}
func testJobsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	jobFound, err := FindJob(tx, job.JobID)
	if err != nil {
		t.Error(err)
	}

	if jobFound == nil {
		t.Error("want a record, got nil")
	}
}
func testJobsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Jobs(tx).Bind(job); err != nil {
		t.Error(err)
	}
}

func testJobsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Jobs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testJobsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jobOne := &Job{}
	jobTwo := &Job{}
	if err = randomize.Struct(seed, jobOne, jobDBTypes, false, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}
	if err = randomize.Struct(seed, jobTwo, jobDBTypes, false, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jobOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = jobTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Jobs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testJobsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	jobOne := &Job{}
	jobTwo := &Job{}
	if err = randomize.Struct(seed, jobOne, jobDBTypes, false, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}
	if err = randomize.Struct(seed, jobTwo, jobDBTypes, false, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jobOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = jobTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func jobBeforeInsertHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobAfterInsertHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobAfterSelectHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobBeforeUpdateHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobAfterUpdateHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobBeforeDeleteHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobAfterDeleteHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobBeforeUpsertHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobAfterUpsertHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func testJobsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Job{}
	o := &Job{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, jobDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Job object: %s", err)
	}

	AddJobHook(boil.BeforeInsertHook, jobBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	jobBeforeInsertHooks = []JobHook{}

	AddJobHook(boil.AfterInsertHook, jobAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	jobAfterInsertHooks = []JobHook{}

	AddJobHook(boil.AfterSelectHook, jobAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	jobAfterSelectHooks = []JobHook{}

	AddJobHook(boil.BeforeUpdateHook, jobBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	jobBeforeUpdateHooks = []JobHook{}

	AddJobHook(boil.AfterUpdateHook, jobAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	jobAfterUpdateHooks = []JobHook{}

	AddJobHook(boil.BeforeDeleteHook, jobBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	jobBeforeDeleteHooks = []JobHook{}

	AddJobHook(boil.AfterDeleteHook, jobAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	jobAfterDeleteHooks = []JobHook{}

	AddJobHook(boil.BeforeUpsertHook, jobBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	jobBeforeUpsertHooks = []JobHook{}

	AddJobHook(boil.AfterUpsertHook, jobAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	jobAfterUpsertHooks = []JobHook{}
}
func testJobsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJobsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx, jobColumns...); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJobToManyWorksFors(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Job
	var b, c WorksFor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, worksForDBTypes, false, worksForColumnsWithDefault...)
	randomize.Struct(seed, &c, worksForDBTypes, false, worksForColumnsWithDefault...)

	b.JobID = a.JobID
	c.JobID = a.JobID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	worksFor, err := a.WorksFors(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range worksFor {
		if v.JobID == b.JobID {
			bFound = true
		}
		if v.JobID == c.JobID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := JobSlice{&a}
	if err = a.L.LoadWorksFors(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WorksFors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WorksFors = nil
	if err = a.L.LoadWorksFors(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WorksFors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", worksFor)
	}
}

func testJobToManyAddOpWorksFors(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Job
	var b, c, d, e WorksFor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, jobDBTypes, false, strmangle.SetComplement(jobPrimaryKeyColumns, jobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WorksFor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, worksForDBTypes, false, strmangle.SetComplement(worksForPrimaryKeyColumns, worksForColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*WorksFor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWorksFors(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.JobID != first.JobID {
			t.Error("foreign key was wrong value", a.JobID, first.JobID)
		}
		if a.JobID != second.JobID {
			t.Error("foreign key was wrong value", a.JobID, second.JobID)
		}

		if first.R.Job != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Job != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WorksFors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WorksFors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WorksFors(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testJobToOneCompanyUsingCompany(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Job
	var foreign Company

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CompanyID = foreign.CompanyID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Company(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.CompanyID != foreign.CompanyID {
		t.Errorf("want: %v, got %v", foreign.CompanyID, check.CompanyID)
	}

	slice := JobSlice{&local}
	if err = local.L.LoadCompany(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Company == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Company = nil
	if err = local.L.LoadCompany(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Company == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testJobToOneSetOpCompanyUsingCompany(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Job
	var b, c Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, jobDBTypes, false, strmangle.SetComplement(jobPrimaryKeyColumns, jobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Company{&b, &c} {
		err = a.SetCompany(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Company != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Jobs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CompanyID != x.CompanyID {
			t.Error("foreign key was wrong value", a.CompanyID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CompanyID))
		reflect.Indirect(reflect.ValueOf(&a.CompanyID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CompanyID != x.CompanyID {
			t.Error("foreign key was wrong value", a.CompanyID, x.CompanyID)
		}
	}
}
func testJobsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = job.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testJobsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := JobSlice{job}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testJobsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Jobs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	jobDBTypes = map[string]string{`CompanyID`: `numeric`, `DeadlineDate`: `date`, `JobID`: `numeric`, `Name`: `character varying`, `NumAvailablePositions`: `integer`, `NumOfPositions`: `integer`, `Rating`: `integer`, `StudentLevel`: `integer`}
	_          = bytes.MinRead
)

func testJobsUpdate(t *testing.T) {
	t.Parallel()

	if len(jobColumns) == len(jobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	if err = job.Update(tx); err != nil {
		t.Error(err)
	}
}

func testJobsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(jobColumns) == len(jobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, job, jobDBTypes, true, jobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(jobColumns, jobPrimaryKeyColumns) {
		fields = jobColumns
	} else {
		fields = strmangle.SetComplement(
			jobColumns,
			jobPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(job))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := JobSlice{job}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testJobsUpsert(t *testing.T) {
	t.Parallel()

	if len(jobColumns) == len(jobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	job := Job{}
	if err = randomize.Struct(seed, &job, jobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Job: %s", err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &job, jobDBTypes, false, jobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	if err = job.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Job: %s", err)
	}

	count, err = Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
