// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testCompanies(t *testing.T) {
	t.Parallel()

	query := Companies(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testCompaniesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = company.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Companies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Companies(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Companies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CompanySlice{company}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Companies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testCompaniesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := CompanyExists(tx, company.CompanyID)
	if err != nil {
		t.Errorf("Unable to check if Company exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompanyExistsG to return true, but got false.")
	}
}
func testCompaniesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	companyFound, err := FindCompany(tx, company.CompanyID)
	if err != nil {
		t.Error(err)
	}

	if companyFound == nil {
		t.Error("want a record, got nil")
	}
}
func testCompaniesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Companies(tx).Bind(company); err != nil {
		t.Error(err)
	}
}

func testCompaniesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Companies(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompaniesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	companyOne := &Company{}
	companyTwo := &Company{}
	if err = randomize.Struct(seed, companyOne, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err = randomize.Struct(seed, companyTwo, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = companyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = companyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Companies(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompaniesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	companyOne := &Company{}
	companyTwo := &Company{}
	if err = randomize.Struct(seed, companyOne, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err = randomize.Struct(seed, companyTwo, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = companyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = companyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Companies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func companyBeforeInsertHook(e boil.Executor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterInsertHook(e boil.Executor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterSelectHook(e boil.Executor, o *Company) error {
	*o = Company{}
	return nil
}

func companyBeforeUpdateHook(e boil.Executor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterUpdateHook(e boil.Executor, o *Company) error {
	*o = Company{}
	return nil
}

func companyBeforeDeleteHook(e boil.Executor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterDeleteHook(e boil.Executor, o *Company) error {
	*o = Company{}
	return nil
}

func companyBeforeUpsertHook(e boil.Executor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterUpsertHook(e boil.Executor, o *Company) error {
	*o = Company{}
	return nil
}

func testCompaniesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Company{}
	o := &Company{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, companyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Company object: %s", err)
	}

	AddCompanyHook(boil.BeforeInsertHook, companyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	companyBeforeInsertHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterInsertHook, companyAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	companyAfterInsertHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterSelectHook, companyAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	companyAfterSelectHooks = []CompanyHook{}

	AddCompanyHook(boil.BeforeUpdateHook, companyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	companyBeforeUpdateHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterUpdateHook, companyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	companyAfterUpdateHooks = []CompanyHook{}

	AddCompanyHook(boil.BeforeDeleteHook, companyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	companyBeforeDeleteHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterDeleteHook, companyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	companyAfterDeleteHooks = []CompanyHook{}

	AddCompanyHook(boil.BeforeUpsertHook, companyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	companyBeforeUpsertHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterUpsertHook, companyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	companyAfterUpsertHooks = []CompanyHook{}
}
func testCompaniesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Companies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompaniesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx, companyColumns...); err != nil {
		t.Error(err)
	}

	count, err := Companies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompanyToManyJobs(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Company
	var b, c Job

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, jobDBTypes, false, jobColumnsWithDefault...)
	randomize.Struct(seed, &c, jobDBTypes, false, jobColumnsWithDefault...)

	b.CompanyID = a.CompanyID
	c.CompanyID = a.CompanyID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	job, err := a.Jobs(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range job {
		if v.CompanyID == b.CompanyID {
			bFound = true
		}
		if v.CompanyID == c.CompanyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompanySlice{&a}
	if err = a.L.LoadJobs(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Jobs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Jobs = nil
	if err = a.L.LoadJobs(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Jobs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", job)
	}
}

func testCompanyToManyAddOpJobs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Company
	var b, c, d, e Job

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Job{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, jobDBTypes, false, strmangle.SetComplement(jobPrimaryKeyColumns, jobColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Job{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddJobs(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CompanyID != first.CompanyID {
			t.Error("foreign key was wrong value", a.CompanyID, first.CompanyID)
		}
		if a.CompanyID != second.CompanyID {
			t.Error("foreign key was wrong value", a.CompanyID, second.CompanyID)
		}

		if first.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Jobs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Jobs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Jobs(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCompaniesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = company.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCompaniesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CompanySlice{company}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testCompaniesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Companies(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	companyDBTypes = map[string]string{`CompanyID`: `numeric`, `Description`: `character varying`, `Name`: `character varying`, `NumEmployees`: `integer`}
	_              = bytes.MinRead
)

func testCompaniesUpdate(t *testing.T) {
	t.Parallel()

	if len(companyColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Companies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, company, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err = company.Update(tx); err != nil {
		t.Error(err)
	}
}

func testCompaniesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(companyColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	company := &Company{}
	if err = randomize.Struct(seed, company, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Companies(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, company, companyDBTypes, true, companyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(companyColumns, companyPrimaryKeyColumns) {
		fields = companyColumns
	} else {
		fields = strmangle.SetComplement(
			companyColumns,
			companyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(company))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := CompanySlice{company}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testCompaniesUpsert(t *testing.T) {
	t.Parallel()

	if len(companyColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	company := Company{}
	if err = randomize.Struct(seed, &company, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = company.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Company: %s", err)
	}

	count, err := Companies(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &company, companyDBTypes, false, companyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err = company.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Company: %s", err)
	}

	count, err = Companies(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
