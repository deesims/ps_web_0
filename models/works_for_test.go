// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testWorksFors(t *testing.T) {
	t.Parallel()

	query := WorksFors(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testWorksForsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = worksFor.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := WorksFors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorksForsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = WorksFors(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := WorksFors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorksForsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := WorksForSlice{worksFor}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := WorksFors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testWorksForsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := WorksForExists(tx, worksFor.JobID, worksFor.UserID)
	if err != nil {
		t.Errorf("Unable to check if WorksFor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WorksForExistsG to return true, but got false.")
	}
}
func testWorksForsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	worksForFound, err := FindWorksFor(tx, worksFor.JobID, worksFor.UserID)
	if err != nil {
		t.Error(err)
	}

	if worksForFound == nil {
		t.Error("want a record, got nil")
	}
}
func testWorksForsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = WorksFors(tx).Bind(worksFor); err != nil {
		t.Error(err)
	}
}

func testWorksForsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := WorksFors(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWorksForsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksForOne := &WorksFor{}
	worksForTwo := &WorksFor{}
	if err = randomize.Struct(seed, worksForOne, worksForDBTypes, false, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}
	if err = randomize.Struct(seed, worksForTwo, worksForDBTypes, false, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksForOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = worksForTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := WorksFors(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWorksForsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	worksForOne := &WorksFor{}
	worksForTwo := &WorksFor{}
	if err = randomize.Struct(seed, worksForOne, worksForDBTypes, false, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}
	if err = randomize.Struct(seed, worksForTwo, worksForDBTypes, false, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksForOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = worksForTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WorksFors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func worksForBeforeInsertHook(e boil.Executor, o *WorksFor) error {
	*o = WorksFor{}
	return nil
}

func worksForAfterInsertHook(e boil.Executor, o *WorksFor) error {
	*o = WorksFor{}
	return nil
}

func worksForAfterSelectHook(e boil.Executor, o *WorksFor) error {
	*o = WorksFor{}
	return nil
}

func worksForBeforeUpdateHook(e boil.Executor, o *WorksFor) error {
	*o = WorksFor{}
	return nil
}

func worksForAfterUpdateHook(e boil.Executor, o *WorksFor) error {
	*o = WorksFor{}
	return nil
}

func worksForBeforeDeleteHook(e boil.Executor, o *WorksFor) error {
	*o = WorksFor{}
	return nil
}

func worksForAfterDeleteHook(e boil.Executor, o *WorksFor) error {
	*o = WorksFor{}
	return nil
}

func worksForBeforeUpsertHook(e boil.Executor, o *WorksFor) error {
	*o = WorksFor{}
	return nil
}

func worksForAfterUpsertHook(e boil.Executor, o *WorksFor) error {
	*o = WorksFor{}
	return nil
}

func testWorksForsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &WorksFor{}
	o := &WorksFor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, worksForDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WorksFor object: %s", err)
	}

	AddWorksForHook(boil.BeforeInsertHook, worksForBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	worksForBeforeInsertHooks = []WorksForHook{}

	AddWorksForHook(boil.AfterInsertHook, worksForAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	worksForAfterInsertHooks = []WorksForHook{}

	AddWorksForHook(boil.AfterSelectHook, worksForAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	worksForAfterSelectHooks = []WorksForHook{}

	AddWorksForHook(boil.BeforeUpdateHook, worksForBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	worksForBeforeUpdateHooks = []WorksForHook{}

	AddWorksForHook(boil.AfterUpdateHook, worksForAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	worksForAfterUpdateHooks = []WorksForHook{}

	AddWorksForHook(boil.BeforeDeleteHook, worksForBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	worksForBeforeDeleteHooks = []WorksForHook{}

	AddWorksForHook(boil.AfterDeleteHook, worksForAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	worksForAfterDeleteHooks = []WorksForHook{}

	AddWorksForHook(boil.BeforeUpsertHook, worksForBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	worksForBeforeUpsertHooks = []WorksForHook{}

	AddWorksForHook(boil.AfterUpsertHook, worksForAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	worksForAfterUpsertHooks = []WorksForHook{}
}
func testWorksForsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WorksFors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorksForsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx, worksForColumns...); err != nil {
		t.Error(err)
	}

	count, err := WorksFors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorksForToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local WorksFor
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, worksForDBTypes, true, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	slice := WorksForSlice{&local}
	if err = local.L.LoadUser(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWorksForToOneJobUsingJob(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local WorksFor
	var foreign Job

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, worksForDBTypes, true, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.JobID = foreign.JobID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Job(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.JobID != foreign.JobID {
		t.Errorf("want: %v, got %v", foreign.JobID, check.JobID)
	}

	slice := WorksForSlice{&local}
	if err = local.L.LoadJob(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Job == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Job = nil
	if err = local.L.LoadJob(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Job == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWorksForToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a WorksFor
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, worksForDBTypes, false, strmangle.SetComplement(worksForPrimaryKeyColumns, worksForColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WorksFors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := WorksForExists(tx, a.JobID, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testWorksForToOneSetOpJobUsingJob(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a WorksFor
	var b, c Job

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, worksForDBTypes, false, strmangle.SetComplement(worksForPrimaryKeyColumns, worksForColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, jobDBTypes, false, strmangle.SetComplement(jobPrimaryKeyColumns, jobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, jobDBTypes, false, strmangle.SetComplement(jobPrimaryKeyColumns, jobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Job{&b, &c} {
		err = a.SetJob(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Job != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WorksFors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.JobID != x.JobID {
			t.Error("foreign key was wrong value", a.JobID)
		}

		if exists, err := WorksForExists(tx, a.JobID, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testWorksForsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = worksFor.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testWorksForsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := WorksForSlice{worksFor}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testWorksForsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := WorksFors(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	worksForDBTypes = map[string]string{`EndDate`: `date`, `JobID`: `numeric`, `StartDate`: `date`, `UserID`: `numeric`}
	_               = bytes.MinRead
)

func testWorksForsUpdate(t *testing.T) {
	t.Parallel()

	if len(worksForColumns) == len(worksForPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WorksFors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true, worksForColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	if err = worksFor.Update(tx); err != nil {
		t.Error(err)
	}
}

func testWorksForsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(worksForColumns) == len(worksForPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	worksFor := &WorksFor{}
	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WorksFors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, worksFor, worksForDBTypes, true, worksForPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(worksForColumns, worksForPrimaryKeyColumns) {
		fields = worksForColumns
	} else {
		fields = strmangle.SetComplement(
			worksForColumns,
			worksForPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(worksFor))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := WorksForSlice{worksFor}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testWorksForsUpsert(t *testing.T) {
	t.Parallel()

	if len(worksForColumns) == len(worksForPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	worksFor := WorksFor{}
	if err = randomize.Struct(seed, &worksFor, worksForDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = worksFor.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert WorksFor: %s", err)
	}

	count, err := WorksFors(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &worksFor, worksForDBTypes, false, worksForPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorksFor struct: %s", err)
	}

	if err = worksFor.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert WorksFor: %s", err)
	}

	count, err = WorksFors(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
