// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testResumeReviews(t *testing.T) {
	t.Parallel()

	query := ResumeReviews(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testResumeReviewsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = resumeReview.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := ResumeReviews(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResumeReviewsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ResumeReviews(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := ResumeReviews(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResumeReviewsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ResumeReviewSlice{resumeReview}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := ResumeReviews(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testResumeReviewsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ResumeReviewExists(tx, resumeReview.ResumeID, resumeReview.ModeratorID)
	if err != nil {
		t.Errorf("Unable to check if ResumeReview exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ResumeReviewExistsG to return true, but got false.")
	}
}
func testResumeReviewsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	resumeReviewFound, err := FindResumeReview(tx, resumeReview.ResumeID, resumeReview.ModeratorID)
	if err != nil {
		t.Error(err)
	}

	if resumeReviewFound == nil {
		t.Error("want a record, got nil")
	}
}
func testResumeReviewsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ResumeReviews(tx).Bind(resumeReview); err != nil {
		t.Error(err)
	}
}

func testResumeReviewsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := ResumeReviews(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testResumeReviewsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReviewOne := &ResumeReview{}
	resumeReviewTwo := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReviewOne, resumeReviewDBTypes, false, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}
	if err = randomize.Struct(seed, resumeReviewTwo, resumeReviewDBTypes, false, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReviewOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = resumeReviewTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ResumeReviews(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testResumeReviewsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	resumeReviewOne := &ResumeReview{}
	resumeReviewTwo := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReviewOne, resumeReviewDBTypes, false, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}
	if err = randomize.Struct(seed, resumeReviewTwo, resumeReviewDBTypes, false, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReviewOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = resumeReviewTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ResumeReviews(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func resumeReviewBeforeInsertHook(e boil.Executor, o *ResumeReview) error {
	*o = ResumeReview{}
	return nil
}

func resumeReviewAfterInsertHook(e boil.Executor, o *ResumeReview) error {
	*o = ResumeReview{}
	return nil
}

func resumeReviewAfterSelectHook(e boil.Executor, o *ResumeReview) error {
	*o = ResumeReview{}
	return nil
}

func resumeReviewBeforeUpdateHook(e boil.Executor, o *ResumeReview) error {
	*o = ResumeReview{}
	return nil
}

func resumeReviewAfterUpdateHook(e boil.Executor, o *ResumeReview) error {
	*o = ResumeReview{}
	return nil
}

func resumeReviewBeforeDeleteHook(e boil.Executor, o *ResumeReview) error {
	*o = ResumeReview{}
	return nil
}

func resumeReviewAfterDeleteHook(e boil.Executor, o *ResumeReview) error {
	*o = ResumeReview{}
	return nil
}

func resumeReviewBeforeUpsertHook(e boil.Executor, o *ResumeReview) error {
	*o = ResumeReview{}
	return nil
}

func resumeReviewAfterUpsertHook(e boil.Executor, o *ResumeReview) error {
	*o = ResumeReview{}
	return nil
}

func testResumeReviewsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &ResumeReview{}
	o := &ResumeReview{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, resumeReviewDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ResumeReview object: %s", err)
	}

	AddResumeReviewHook(boil.BeforeInsertHook, resumeReviewBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	resumeReviewBeforeInsertHooks = []ResumeReviewHook{}

	AddResumeReviewHook(boil.AfterInsertHook, resumeReviewAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	resumeReviewAfterInsertHooks = []ResumeReviewHook{}

	AddResumeReviewHook(boil.AfterSelectHook, resumeReviewAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	resumeReviewAfterSelectHooks = []ResumeReviewHook{}

	AddResumeReviewHook(boil.BeforeUpdateHook, resumeReviewBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	resumeReviewBeforeUpdateHooks = []ResumeReviewHook{}

	AddResumeReviewHook(boil.AfterUpdateHook, resumeReviewAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	resumeReviewAfterUpdateHooks = []ResumeReviewHook{}

	AddResumeReviewHook(boil.BeforeDeleteHook, resumeReviewBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	resumeReviewBeforeDeleteHooks = []ResumeReviewHook{}

	AddResumeReviewHook(boil.AfterDeleteHook, resumeReviewAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	resumeReviewAfterDeleteHooks = []ResumeReviewHook{}

	AddResumeReviewHook(boil.BeforeUpsertHook, resumeReviewBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	resumeReviewBeforeUpsertHooks = []ResumeReviewHook{}

	AddResumeReviewHook(boil.AfterUpsertHook, resumeReviewAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	resumeReviewAfterUpsertHooks = []ResumeReviewHook{}
}
func testResumeReviewsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ResumeReviews(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testResumeReviewsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx, resumeReviewColumns...); err != nil {
		t.Error(err)
	}

	count, err := ResumeReviews(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testResumeReviewToOneUserUsingModerator(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local ResumeReview
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, resumeReviewDBTypes, true, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ModeratorID = foreign.UserID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Moderator(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	slice := ResumeReviewSlice{&local}
	if err = local.L.LoadModerator(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Moderator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Moderator = nil
	if err = local.L.LoadModerator(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Moderator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testResumeReviewToOneSetOpUserUsingModerator(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a ResumeReview
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resumeReviewDBTypes, false, strmangle.SetComplement(resumeReviewPrimaryKeyColumns, resumeReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetModerator(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Moderator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ModeratorResumeReviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ModeratorID != x.UserID {
			t.Error("foreign key was wrong value", a.ModeratorID)
		}

		if exists, err := ResumeReviewExists(tx, a.ResumeID, a.ModeratorID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testResumeReviewsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = resumeReview.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testResumeReviewsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ResumeReviewSlice{resumeReview}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testResumeReviewsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ResumeReviews(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	resumeReviewDBTypes = map[string]string{`ModeratorID`: `numeric`, `ResumeID`: `numeric`, `Review`: `character varying`, `ReviewDate`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testResumeReviewsUpdate(t *testing.T) {
	t.Parallel()

	if len(resumeReviewColumns) == len(resumeReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ResumeReviews(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true, resumeReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	if err = resumeReview.Update(tx); err != nil {
		t.Error(err)
	}
}

func testResumeReviewsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(resumeReviewColumns) == len(resumeReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	resumeReview := &ResumeReview{}
	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ResumeReviews(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, resumeReview, resumeReviewDBTypes, true, resumeReviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(resumeReviewColumns, resumeReviewPrimaryKeyColumns) {
		fields = resumeReviewColumns
	} else {
		fields = strmangle.SetComplement(
			resumeReviewColumns,
			resumeReviewPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(resumeReview))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ResumeReviewSlice{resumeReview}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testResumeReviewsUpsert(t *testing.T) {
	t.Parallel()

	if len(resumeReviewColumns) == len(resumeReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	resumeReview := ResumeReview{}
	if err = randomize.Struct(seed, &resumeReview, resumeReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeReview.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert ResumeReview: %s", err)
	}

	count, err := ResumeReviews(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &resumeReview, resumeReviewDBTypes, false, resumeReviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ResumeReview struct: %s", err)
	}

	if err = resumeReview.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert ResumeReview: %s", err)
	}

	count, err = ResumeReviews(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
