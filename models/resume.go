// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Resume is an object representing the database table.
type Resume struct {
	ResumeID      float64     `boil:"resume_id" json:"resume_id" toml:"resume_id" yaml:"resume_id"`
	AuthorID      float64     `boil:"author_id" json:"author_id" toml:"author_id" yaml:"author_id"`
	LastUpdatedAt time.Time   `boil:"last_updated_at" json:"last_updated_at" toml:"last_updated_at" yaml:"last_updated_at"`
	ResumePath    null.String `boil:"resume_path" json:"resume_path,omitempty" toml:"resume_path" yaml:"resume_path,omitempty"`

	R *resumeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L resumeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// resumeR is where relationships are stored.
type resumeR struct {
	Author *User
}

// resumeL is where Load methods for each relationship are stored.
type resumeL struct{}

var (
	resumeColumns               = []string{"resume_id", "author_id", "last_updated_at", "resume_path"}
	resumeColumnsWithoutDefault = []string{"author_id", "last_updated_at", "resume_path"}
	resumeColumnsWithDefault    = []string{"resume_id"}
	resumePrimaryKeyColumns     = []string{"resume_id", "author_id"}
)

type (
	// ResumeSlice is an alias for a slice of pointers to Resume.
	// This should generally be used opposed to []Resume.
	ResumeSlice []*Resume
	// ResumeHook is the signature for custom Resume hook methods
	ResumeHook func(boil.Executor, *Resume) error

	resumeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	resumeType                 = reflect.TypeOf(&Resume{})
	resumeMapping              = queries.MakeStructMapping(resumeType)
	resumePrimaryKeyMapping, _ = queries.BindMapping(resumeType, resumeMapping, resumePrimaryKeyColumns)
	resumeInsertCacheMut       sync.RWMutex
	resumeInsertCache          = make(map[string]insertCache)
	resumeUpdateCacheMut       sync.RWMutex
	resumeUpdateCache          = make(map[string]updateCache)
	resumeUpsertCacheMut       sync.RWMutex
	resumeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var resumeBeforeInsertHooks []ResumeHook
var resumeBeforeUpdateHooks []ResumeHook
var resumeBeforeDeleteHooks []ResumeHook
var resumeBeforeUpsertHooks []ResumeHook

var resumeAfterInsertHooks []ResumeHook
var resumeAfterSelectHooks []ResumeHook
var resumeAfterUpdateHooks []ResumeHook
var resumeAfterDeleteHooks []ResumeHook
var resumeAfterUpsertHooks []ResumeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Resume) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Resume) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Resume) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Resume) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Resume) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Resume) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Resume) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Resume) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Resume) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddResumeHook registers your hook function for all future operations.
func AddResumeHook(hookPoint boil.HookPoint, resumeHook ResumeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		resumeBeforeInsertHooks = append(resumeBeforeInsertHooks, resumeHook)
	case boil.BeforeUpdateHook:
		resumeBeforeUpdateHooks = append(resumeBeforeUpdateHooks, resumeHook)
	case boil.BeforeDeleteHook:
		resumeBeforeDeleteHooks = append(resumeBeforeDeleteHooks, resumeHook)
	case boil.BeforeUpsertHook:
		resumeBeforeUpsertHooks = append(resumeBeforeUpsertHooks, resumeHook)
	case boil.AfterInsertHook:
		resumeAfterInsertHooks = append(resumeAfterInsertHooks, resumeHook)
	case boil.AfterSelectHook:
		resumeAfterSelectHooks = append(resumeAfterSelectHooks, resumeHook)
	case boil.AfterUpdateHook:
		resumeAfterUpdateHooks = append(resumeAfterUpdateHooks, resumeHook)
	case boil.AfterDeleteHook:
		resumeAfterDeleteHooks = append(resumeAfterDeleteHooks, resumeHook)
	case boil.AfterUpsertHook:
		resumeAfterUpsertHooks = append(resumeAfterUpsertHooks, resumeHook)
	}
}

// OneP returns a single resume record from the query, and panics on error.
func (q resumeQuery) OneP() *Resume {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single resume record from the query.
func (q resumeQuery) One() (*Resume, error) {
	o := &Resume{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for resume")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Resume records from the query, and panics on error.
func (q resumeQuery) AllP() ResumeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Resume records from the query.
func (q resumeQuery) All() (ResumeSlice, error) {
	var o ResumeSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Resume slice")
	}

	if len(resumeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Resume records in the query, and panics on error.
func (q resumeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Resume records in the query.
func (q resumeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count resume rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q resumeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q resumeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if resume exists")
	}

	return count > 0, nil
}

// AuthorG pointed to by the foreign key.
func (o *Resume) AuthorG(mods ...qm.QueryMod) userQuery {
	return o.Author(boil.GetDB(), mods...)
}

// Author pointed to by the foreign key.
func (o *Resume) Author(exec boil.Executor, mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_id=?", o.AuthorID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(exec, queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadAuthor allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (resumeL) LoadAuthor(e boil.Executor, singular bool, maybeResume interface{}) error {
	var slice []*Resume
	var object *Resume

	count := 1
	if singular {
		object = maybeResume.(*Resume)
	} else {
		slice = *maybeResume.(*ResumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &resumeR{}
		}
		args[0] = object.AuthorID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &resumeR{}
			}
			args[i] = obj.AuthorID
		}
	}

	query := fmt.Sprintf(
		"select * from \"users\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}
	defer results.Close()

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if len(resumeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Author = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuthorID == foreign.UserID {
				local.R.Author = foreign
				break
			}
		}
	}

	return nil
}

// SetAuthorG of the resume to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorResumes.
// Uses the global database handle.
func (o *Resume) SetAuthorG(insert bool, related *User) error {
	return o.SetAuthor(boil.GetDB(), insert, related)
}

// SetAuthorP of the resume to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorResumes.
// Panics on error.
func (o *Resume) SetAuthorP(exec boil.Executor, insert bool, related *User) {
	if err := o.SetAuthor(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAuthorGP of the resume to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorResumes.
// Uses the global database handle and panics on error.
func (o *Resume) SetAuthorGP(insert bool, related *User) {
	if err := o.SetAuthor(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAuthor of the resume to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorResumes.
func (o *Resume) SetAuthor(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"resume\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"author_id"}),
		strmangle.WhereClause("\"", "\"", 2, resumePrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.ResumeID, o.AuthorID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuthorID = related.UserID

	if o.R == nil {
		o.R = &resumeR{
			Author: related,
		}
	} else {
		o.R.Author = related
	}

	if related.R == nil {
		related.R = &userR{
			AuthorResumes: ResumeSlice{o},
		}
	} else {
		related.R.AuthorResumes = append(related.R.AuthorResumes, o)
	}

	return nil
}

// ResumesG retrieves all records.
func ResumesG(mods ...qm.QueryMod) resumeQuery {
	return Resumes(boil.GetDB(), mods...)
}

// Resumes retrieves all the records using an executor.
func Resumes(exec boil.Executor, mods ...qm.QueryMod) resumeQuery {
	mods = append(mods, qm.From("\"resume\""))
	return resumeQuery{NewQuery(exec, mods...)}
}

// FindResumeG retrieves a single record by ID.
func FindResumeG(resumeID float64, authorID float64, selectCols ...string) (*Resume, error) {
	return FindResume(boil.GetDB(), resumeID, authorID, selectCols...)
}

// FindResumeGP retrieves a single record by ID, and panics on error.
func FindResumeGP(resumeID float64, authorID float64, selectCols ...string) *Resume {
	retobj, err := FindResume(boil.GetDB(), resumeID, authorID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindResume retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindResume(exec boil.Executor, resumeID float64, authorID float64, selectCols ...string) (*Resume, error) {
	resumeObj := &Resume{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"resume\" where \"resume_id\"=$1 AND \"author_id\"=$2", sel,
	)

	q := queries.Raw(exec, query, resumeID, authorID)

	err := q.Bind(resumeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from resume")
	}

	return resumeObj, nil
}

// FindResumeP retrieves a single record by ID with an executor, and panics on error.
func FindResumeP(exec boil.Executor, resumeID float64, authorID float64, selectCols ...string) *Resume {
	retobj, err := FindResume(exec, resumeID, authorID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Resume) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Resume) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Resume) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Resume) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no resume provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(resumeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	resumeInsertCacheMut.RLock()
	cache, cached := resumeInsertCache[key]
	resumeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			resumeColumns,
			resumeColumnsWithDefault,
			resumeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(resumeType, resumeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(resumeType, resumeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"resume\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"resume\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into resume")
	}

	if !cached {
		resumeInsertCacheMut.Lock()
		resumeInsertCache[key] = cache
		resumeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Resume record. See Update for
// whitelist behavior description.
func (o *Resume) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Resume record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Resume) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Resume, and panics on error.
// See Update for whitelist behavior description.
func (o *Resume) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Resume.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Resume) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	resumeUpdateCacheMut.RLock()
	cache, cached := resumeUpdateCache[key]
	resumeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(resumeColumns, resumePrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update resume, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"resume\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, resumePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(resumeType, resumeMapping, append(wl, resumePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update resume row")
	}

	if !cached {
		resumeUpdateCacheMut.Lock()
		resumeUpdateCache[key] = cache
		resumeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q resumeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q resumeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for resume")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ResumeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ResumeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ResumeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ResumeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resumePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE \"resume\" SET %s WHERE (\"resume_id\",\"author_id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(resumePrimaryKeyColumns), len(colNames)+1, len(resumePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in resume slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Resume) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Resume) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Resume) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Resume) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no resume provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(resumeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	resumeUpsertCacheMut.RLock()
	cache, cached := resumeUpsertCache[key]
	resumeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			resumeColumns,
			resumeColumnsWithDefault,
			resumeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			resumeColumns,
			resumePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert resume, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(resumePrimaryKeyColumns))
			copy(conflict, resumePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"resume\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(resumeType, resumeMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(resumeType, resumeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert resume")
	}

	if !cached {
		resumeUpsertCacheMut.Lock()
		resumeUpsertCache[key] = cache
		resumeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Resume record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Resume) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Resume record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Resume) DeleteG() error {
	if o == nil {
		return errors.New("models: no Resume provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Resume record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Resume) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Resume record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Resume) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Resume provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), resumePrimaryKeyMapping)
	sql := "DELETE FROM \"resume\" WHERE \"resume_id\"=$1 AND \"author_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from resume")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q resumeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q resumeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no resumeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from resume")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ResumeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ResumeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Resume slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ResumeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ResumeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Resume slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(resumeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resumePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM \"resume\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, resumePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(resumePrimaryKeyColumns), 1, len(resumePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from resume slice")
	}

	if len(resumeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Resume) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Resume) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Resume) ReloadG() error {
	if o == nil {
		return errors.New("models: no Resume provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Resume) Reload(exec boil.Executor) error {
	ret, err := FindResume(exec, o.ResumeID, o.AuthorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ResumeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ResumeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ResumeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ResumeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ResumeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	resumes := ResumeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resumePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT \"resume\".* FROM \"resume\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, resumePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(resumePrimaryKeyColumns), 1, len(resumePrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&resumes)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ResumeSlice")
	}

	*o = resumes

	return nil
}

// ResumeExists checks if the Resume row exists.
func ResumeExists(exec boil.Executor, resumeID float64, authorID float64) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from \"resume\" where \"resume_id\"=$1 AND \"author_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, resumeID, authorID)
	}

	row := exec.QueryRow(sql, resumeID, authorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if resume exists")
	}

	return exists, nil
}

// ResumeExistsG checks if the Resume row exists.
func ResumeExistsG(resumeID float64, authorID float64) (bool, error) {
	return ResumeExists(boil.GetDB(), resumeID, authorID)
}

// ResumeExistsGP checks if the Resume row exists. Panics on error.
func ResumeExistsGP(resumeID float64, authorID float64) bool {
	e, err := ResumeExists(boil.GetDB(), resumeID, authorID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ResumeExistsP checks if the Resume row exists. Panics on error.
func ResumeExistsP(exec boil.Executor, resumeID float64, authorID float64) bool {
	e, err := ResumeExists(exec, resumeID, authorID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
