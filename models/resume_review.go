// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// ResumeReview is an object representing the database table.
type ResumeReview struct {
	ResumeID    float64   `boil:"resume_id" json:"resume_id" toml:"resume_id" yaml:"resume_id"`
	ModeratorID float64   `boil:"moderator_id" json:"moderator_id" toml:"moderator_id" yaml:"moderator_id"`
	ReviewDate  time.Time `boil:"review_date" json:"review_date" toml:"review_date" yaml:"review_date"`
	Review      string    `boil:"review" json:"review" toml:"review" yaml:"review"`

	R *resumeReviewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L resumeReviewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// resumeReviewR is where relationships are stored.
type resumeReviewR struct {
	Moderator *User
}

// resumeReviewL is where Load methods for each relationship are stored.
type resumeReviewL struct{}

var (
	resumeReviewColumns               = []string{"resume_id", "moderator_id", "review_date", "review"}
	resumeReviewColumnsWithoutDefault = []string{"resume_id", "moderator_id", "review_date", "review"}
	resumeReviewColumnsWithDefault    = []string{}
	resumeReviewPrimaryKeyColumns     = []string{"resume_id", "moderator_id"}
)

type (
	// ResumeReviewSlice is an alias for a slice of pointers to ResumeReview.
	// This should generally be used opposed to []ResumeReview.
	ResumeReviewSlice []*ResumeReview
	// ResumeReviewHook is the signature for custom ResumeReview hook methods
	ResumeReviewHook func(boil.Executor, *ResumeReview) error

	resumeReviewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	resumeReviewType                 = reflect.TypeOf(&ResumeReview{})
	resumeReviewMapping              = queries.MakeStructMapping(resumeReviewType)
	resumeReviewPrimaryKeyMapping, _ = queries.BindMapping(resumeReviewType, resumeReviewMapping, resumeReviewPrimaryKeyColumns)
	resumeReviewInsertCacheMut       sync.RWMutex
	resumeReviewInsertCache          = make(map[string]insertCache)
	resumeReviewUpdateCacheMut       sync.RWMutex
	resumeReviewUpdateCache          = make(map[string]updateCache)
	resumeReviewUpsertCacheMut       sync.RWMutex
	resumeReviewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var resumeReviewBeforeInsertHooks []ResumeReviewHook
var resumeReviewBeforeUpdateHooks []ResumeReviewHook
var resumeReviewBeforeDeleteHooks []ResumeReviewHook
var resumeReviewBeforeUpsertHooks []ResumeReviewHook

var resumeReviewAfterInsertHooks []ResumeReviewHook
var resumeReviewAfterSelectHooks []ResumeReviewHook
var resumeReviewAfterUpdateHooks []ResumeReviewHook
var resumeReviewAfterDeleteHooks []ResumeReviewHook
var resumeReviewAfterUpsertHooks []ResumeReviewHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ResumeReview) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeReviewBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ResumeReview) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeReviewBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ResumeReview) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeReviewBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ResumeReview) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeReviewBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ResumeReview) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeReviewAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ResumeReview) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeReviewAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ResumeReview) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeReviewAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ResumeReview) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeReviewAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ResumeReview) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range resumeReviewAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddResumeReviewHook registers your hook function for all future operations.
func AddResumeReviewHook(hookPoint boil.HookPoint, resumeReviewHook ResumeReviewHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		resumeReviewBeforeInsertHooks = append(resumeReviewBeforeInsertHooks, resumeReviewHook)
	case boil.BeforeUpdateHook:
		resumeReviewBeforeUpdateHooks = append(resumeReviewBeforeUpdateHooks, resumeReviewHook)
	case boil.BeforeDeleteHook:
		resumeReviewBeforeDeleteHooks = append(resumeReviewBeforeDeleteHooks, resumeReviewHook)
	case boil.BeforeUpsertHook:
		resumeReviewBeforeUpsertHooks = append(resumeReviewBeforeUpsertHooks, resumeReviewHook)
	case boil.AfterInsertHook:
		resumeReviewAfterInsertHooks = append(resumeReviewAfterInsertHooks, resumeReviewHook)
	case boil.AfterSelectHook:
		resumeReviewAfterSelectHooks = append(resumeReviewAfterSelectHooks, resumeReviewHook)
	case boil.AfterUpdateHook:
		resumeReviewAfterUpdateHooks = append(resumeReviewAfterUpdateHooks, resumeReviewHook)
	case boil.AfterDeleteHook:
		resumeReviewAfterDeleteHooks = append(resumeReviewAfterDeleteHooks, resumeReviewHook)
	case boil.AfterUpsertHook:
		resumeReviewAfterUpsertHooks = append(resumeReviewAfterUpsertHooks, resumeReviewHook)
	}
}

// OneP returns a single resumeReview record from the query, and panics on error.
func (q resumeReviewQuery) OneP() *ResumeReview {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single resumeReview record from the query.
func (q resumeReviewQuery) One() (*ResumeReview, error) {
	o := &ResumeReview{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for resume_review")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all ResumeReview records from the query, and panics on error.
func (q resumeReviewQuery) AllP() ResumeReviewSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all ResumeReview records from the query.
func (q resumeReviewQuery) All() (ResumeReviewSlice, error) {
	var o ResumeReviewSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ResumeReview slice")
	}

	if len(resumeReviewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all ResumeReview records in the query, and panics on error.
func (q resumeReviewQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all ResumeReview records in the query.
func (q resumeReviewQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count resume_review rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q resumeReviewQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q resumeReviewQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if resume_review exists")
	}

	return count > 0, nil
}

// ModeratorG pointed to by the foreign key.
func (o *ResumeReview) ModeratorG(mods ...qm.QueryMod) userQuery {
	return o.Moderator(boil.GetDB(), mods...)
}

// Moderator pointed to by the foreign key.
func (o *ResumeReview) Moderator(exec boil.Executor, mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_id=?", o.ModeratorID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user\"")

	return query
}

// LoadModerator allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (resumeReviewL) LoadModerator(e boil.Executor, singular bool, maybeResumeReview interface{}) error {
	var slice []*ResumeReview
	var object *ResumeReview

	count := 1
	if singular {
		object = maybeResumeReview.(*ResumeReview)
	} else {
		slice = *maybeResumeReview.(*ResumeReviewSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &resumeReviewR{}
		}
		args[0] = object.ModeratorID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &resumeReviewR{}
			}
			args[i] = obj.ModeratorID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}
	defer results.Close()

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if len(resumeReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Moderator = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModeratorID == foreign.UserID {
				local.R.Moderator = foreign
				break
			}
		}
	}

	return nil
}

// SetModeratorG of the resume_review to the related item.
// Sets o.R.Moderator to related.
// Adds o to related.R.ModeratorResumeReviews.
// Uses the global database handle.
func (o *ResumeReview) SetModeratorG(insert bool, related *User) error {
	return o.SetModerator(boil.GetDB(), insert, related)
}

// SetModeratorP of the resume_review to the related item.
// Sets o.R.Moderator to related.
// Adds o to related.R.ModeratorResumeReviews.
// Panics on error.
func (o *ResumeReview) SetModeratorP(exec boil.Executor, insert bool, related *User) {
	if err := o.SetModerator(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetModeratorGP of the resume_review to the related item.
// Sets o.R.Moderator to related.
// Adds o to related.R.ModeratorResumeReviews.
// Uses the global database handle and panics on error.
func (o *ResumeReview) SetModeratorGP(insert bool, related *User) {
	if err := o.SetModerator(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetModerator of the resume_review to the related item.
// Sets o.R.Moderator to related.
// Adds o to related.R.ModeratorResumeReviews.
func (o *ResumeReview) SetModerator(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"resume_review\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"moderator_id"}),
		strmangle.WhereClause("\"", "\"", 2, resumeReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.ResumeID, o.ModeratorID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModeratorID = related.UserID

	if o.R == nil {
		o.R = &resumeReviewR{
			Moderator: related,
		}
	} else {
		o.R.Moderator = related
	}

	if related.R == nil {
		related.R = &userR{
			ModeratorResumeReviews: ResumeReviewSlice{o},
		}
	} else {
		related.R.ModeratorResumeReviews = append(related.R.ModeratorResumeReviews, o)
	}

	return nil
}

// ResumeReviewsG retrieves all records.
func ResumeReviewsG(mods ...qm.QueryMod) resumeReviewQuery {
	return ResumeReviews(boil.GetDB(), mods...)
}

// ResumeReviews retrieves all the records using an executor.
func ResumeReviews(exec boil.Executor, mods ...qm.QueryMod) resumeReviewQuery {
	mods = append(mods, qm.From("\"resume_review\""))
	return resumeReviewQuery{NewQuery(exec, mods...)}
}

// FindResumeReviewG retrieves a single record by ID.
func FindResumeReviewG(resumeID float64, moderatorID float64, selectCols ...string) (*ResumeReview, error) {
	return FindResumeReview(boil.GetDB(), resumeID, moderatorID, selectCols...)
}

// FindResumeReviewGP retrieves a single record by ID, and panics on error.
func FindResumeReviewGP(resumeID float64, moderatorID float64, selectCols ...string) *ResumeReview {
	retobj, err := FindResumeReview(boil.GetDB(), resumeID, moderatorID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindResumeReview retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindResumeReview(exec boil.Executor, resumeID float64, moderatorID float64, selectCols ...string) (*ResumeReview, error) {
	resumeReviewObj := &ResumeReview{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"resume_review\" where \"resume_id\"=$1 AND \"moderator_id\"=$2", sel,
	)

	q := queries.Raw(exec, query, resumeID, moderatorID)

	err := q.Bind(resumeReviewObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from resume_review")
	}

	return resumeReviewObj, nil
}

// FindResumeReviewP retrieves a single record by ID with an executor, and panics on error.
func FindResumeReviewP(exec boil.Executor, resumeID float64, moderatorID float64, selectCols ...string) *ResumeReview {
	retobj, err := FindResumeReview(exec, resumeID, moderatorID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ResumeReview) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *ResumeReview) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ResumeReview) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *ResumeReview) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no resume_review provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(resumeReviewColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	resumeReviewInsertCacheMut.RLock()
	cache, cached := resumeReviewInsertCache[key]
	resumeReviewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			resumeReviewColumns,
			resumeReviewColumnsWithDefault,
			resumeReviewColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(resumeReviewType, resumeReviewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(resumeReviewType, resumeReviewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"resume_review\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"resume_review\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into resume_review")
	}

	if !cached {
		resumeReviewInsertCacheMut.Lock()
		resumeReviewInsertCache[key] = cache
		resumeReviewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ResumeReview record. See Update for
// whitelist behavior description.
func (o *ResumeReview) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single ResumeReview record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *ResumeReview) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the ResumeReview, and panics on error.
// See Update for whitelist behavior description.
func (o *ResumeReview) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the ResumeReview.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *ResumeReview) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	resumeReviewUpdateCacheMut.RLock()
	cache, cached := resumeReviewUpdateCache[key]
	resumeReviewUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(resumeReviewColumns, resumeReviewPrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update resume_review, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"resume_review\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, resumeReviewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(resumeReviewType, resumeReviewMapping, append(wl, resumeReviewPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update resume_review row")
	}

	if !cached {
		resumeReviewUpdateCacheMut.Lock()
		resumeReviewUpdateCache[key] = cache
		resumeReviewUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q resumeReviewQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q resumeReviewQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for resume_review")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ResumeReviewSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ResumeReviewSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ResumeReviewSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ResumeReviewSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resumeReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE \"resume_review\" SET %s WHERE (\"resume_id\",\"moderator_id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(resumeReviewPrimaryKeyColumns), len(colNames)+1, len(resumeReviewPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in resumeReview slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ResumeReview) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *ResumeReview) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ResumeReview) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ResumeReview) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no resume_review provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(resumeReviewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	resumeReviewUpsertCacheMut.RLock()
	cache, cached := resumeReviewUpsertCache[key]
	resumeReviewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			resumeReviewColumns,
			resumeReviewColumnsWithDefault,
			resumeReviewColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			resumeReviewColumns,
			resumeReviewPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert resume_review, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(resumeReviewPrimaryKeyColumns))
			copy(conflict, resumeReviewPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"resume_review\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(resumeReviewType, resumeReviewMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(resumeReviewType, resumeReviewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert resume_review")
	}

	if !cached {
		resumeReviewUpsertCacheMut.Lock()
		resumeReviewUpsertCache[key] = cache
		resumeReviewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single ResumeReview record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ResumeReview) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single ResumeReview record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ResumeReview) DeleteG() error {
	if o == nil {
		return errors.New("models: no ResumeReview provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single ResumeReview record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ResumeReview) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single ResumeReview record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ResumeReview) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no ResumeReview provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), resumeReviewPrimaryKeyMapping)
	sql := "DELETE FROM \"resume_review\" WHERE \"resume_id\"=$1 AND \"moderator_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from resume_review")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q resumeReviewQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q resumeReviewQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no resumeReviewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from resume_review")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ResumeReviewSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ResumeReviewSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no ResumeReview slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ResumeReviewSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ResumeReviewSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no ResumeReview slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(resumeReviewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resumeReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM \"resume_review\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, resumeReviewPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(resumeReviewPrimaryKeyColumns), 1, len(resumeReviewPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from resumeReview slice")
	}

	if len(resumeReviewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *ResumeReview) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ResumeReview) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ResumeReview) ReloadG() error {
	if o == nil {
		return errors.New("models: no ResumeReview provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ResumeReview) Reload(exec boil.Executor) error {
	ret, err := FindResumeReview(exec, o.ResumeID, o.ModeratorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ResumeReviewSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ResumeReviewSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ResumeReviewSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ResumeReviewSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ResumeReviewSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	resumeReviews := ResumeReviewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resumeReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT \"resume_review\".* FROM \"resume_review\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, resumeReviewPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(resumeReviewPrimaryKeyColumns), 1, len(resumeReviewPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&resumeReviews)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ResumeReviewSlice")
	}

	*o = resumeReviews

	return nil
}

// ResumeReviewExists checks if the ResumeReview row exists.
func ResumeReviewExists(exec boil.Executor, resumeID float64, moderatorID float64) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from \"resume_review\" where \"resume_id\"=$1 AND \"moderator_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, resumeID, moderatorID)
	}

	row := exec.QueryRow(sql, resumeID, moderatorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if resume_review exists")
	}

	return exists, nil
}

// ResumeReviewExistsG checks if the ResumeReview row exists.
func ResumeReviewExistsG(resumeID float64, moderatorID float64) (bool, error) {
	return ResumeReviewExists(boil.GetDB(), resumeID, moderatorID)
}

// ResumeReviewExistsGP checks if the ResumeReview row exists. Panics on error.
func ResumeReviewExistsGP(resumeID float64, moderatorID float64) bool {
	e, err := ResumeReviewExists(boil.GetDB(), resumeID, moderatorID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ResumeReviewExistsP checks if the ResumeReview row exists. Panics on error.
func ResumeReviewExistsP(exec boil.Executor, resumeID float64, moderatorID float64) bool {
	e, err := ResumeReviewExists(exec, resumeID, moderatorID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
