// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testResumes(t *testing.T) {
	t.Parallel()

	query := Resumes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testResumesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = resume.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Resumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResumesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Resumes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Resumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResumesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ResumeSlice{resume}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Resumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testResumesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ResumeExists(tx, resume.ResumeID, resume.AuthorID)
	if err != nil {
		t.Errorf("Unable to check if Resume exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ResumeExistsG to return true, but got false.")
	}
}
func testResumesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	resumeFound, err := FindResume(tx, resume.ResumeID, resume.AuthorID)
	if err != nil {
		t.Error(err)
	}

	if resumeFound == nil {
		t.Error("want a record, got nil")
	}
}
func testResumesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Resumes(tx).Bind(resume); err != nil {
		t.Error(err)
	}
}

func testResumesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Resumes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testResumesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resumeOne := &Resume{}
	resumeTwo := &Resume{}
	if err = randomize.Struct(seed, resumeOne, resumeDBTypes, false, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}
	if err = randomize.Struct(seed, resumeTwo, resumeDBTypes, false, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = resumeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Resumes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testResumesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	resumeOne := &Resume{}
	resumeTwo := &Resume{}
	if err = randomize.Struct(seed, resumeOne, resumeDBTypes, false, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}
	if err = randomize.Struct(seed, resumeTwo, resumeDBTypes, false, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resumeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = resumeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Resumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func resumeBeforeInsertHook(e boil.Executor, o *Resume) error {
	*o = Resume{}
	return nil
}

func resumeAfterInsertHook(e boil.Executor, o *Resume) error {
	*o = Resume{}
	return nil
}

func resumeAfterSelectHook(e boil.Executor, o *Resume) error {
	*o = Resume{}
	return nil
}

func resumeBeforeUpdateHook(e boil.Executor, o *Resume) error {
	*o = Resume{}
	return nil
}

func resumeAfterUpdateHook(e boil.Executor, o *Resume) error {
	*o = Resume{}
	return nil
}

func resumeBeforeDeleteHook(e boil.Executor, o *Resume) error {
	*o = Resume{}
	return nil
}

func resumeAfterDeleteHook(e boil.Executor, o *Resume) error {
	*o = Resume{}
	return nil
}

func resumeBeforeUpsertHook(e boil.Executor, o *Resume) error {
	*o = Resume{}
	return nil
}

func resumeAfterUpsertHook(e boil.Executor, o *Resume) error {
	*o = Resume{}
	return nil
}

func testResumesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Resume{}
	o := &Resume{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, resumeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Resume object: %s", err)
	}

	AddResumeHook(boil.BeforeInsertHook, resumeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	resumeBeforeInsertHooks = []ResumeHook{}

	AddResumeHook(boil.AfterInsertHook, resumeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	resumeAfterInsertHooks = []ResumeHook{}

	AddResumeHook(boil.AfterSelectHook, resumeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	resumeAfterSelectHooks = []ResumeHook{}

	AddResumeHook(boil.BeforeUpdateHook, resumeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	resumeBeforeUpdateHooks = []ResumeHook{}

	AddResumeHook(boil.AfterUpdateHook, resumeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	resumeAfterUpdateHooks = []ResumeHook{}

	AddResumeHook(boil.BeforeDeleteHook, resumeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	resumeBeforeDeleteHooks = []ResumeHook{}

	AddResumeHook(boil.AfterDeleteHook, resumeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	resumeAfterDeleteHooks = []ResumeHook{}

	AddResumeHook(boil.BeforeUpsertHook, resumeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	resumeBeforeUpsertHooks = []ResumeHook{}

	AddResumeHook(boil.AfterUpsertHook, resumeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	resumeAfterUpsertHooks = []ResumeHook{}
}
func testResumesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Resumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testResumesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx, resumeColumns...); err != nil {
		t.Error(err)
	}

	count, err := Resumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testResumeToOneUserUsingAuthor(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Resume
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, resumeDBTypes, true, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.AuthorID = foreign.UserID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	slice := ResumeSlice{&local}
	if err = local.L.LoadAuthor(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testResumeToOneSetOpUserUsingAuthor(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Resume
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resumeDBTypes, false, strmangle.SetComplement(resumePrimaryKeyColumns, resumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetAuthor(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthorResumes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AuthorID != x.UserID {
			t.Error("foreign key was wrong value", a.AuthorID)
		}

		if exists, err := ResumeExists(tx, a.ResumeID, a.AuthorID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testResumesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = resume.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testResumesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ResumeSlice{resume}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testResumesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Resumes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	resumeDBTypes = map[string]string{`AuthorID`: `numeric`, `LastUpdatedAt`: `timestamp without time zone`, `ResumeID`: `numeric`, `ResumePath`: `character varying`}
	_             = bytes.MinRead
)

func testResumesUpdate(t *testing.T) {
	t.Parallel()

	if len(resumeColumns) == len(resumePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Resumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, resume, resumeDBTypes, true, resumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	if err = resume.Update(tx); err != nil {
		t.Error(err)
	}
}

func testResumesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(resumeColumns) == len(resumePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	resume := &Resume{}
	if err = randomize.Struct(seed, resume, resumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Resumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, resume, resumeDBTypes, true, resumePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(resumeColumns, resumePrimaryKeyColumns) {
		fields = resumeColumns
	} else {
		fields = strmangle.SetComplement(
			resumeColumns,
			resumePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(resume))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ResumeSlice{resume}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testResumesUpsert(t *testing.T) {
	t.Parallel()

	if len(resumeColumns) == len(resumePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	resume := Resume{}
	if err = randomize.Struct(seed, &resume, resumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = resume.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Resume: %s", err)
	}

	count, err := Resumes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &resume, resumeDBTypes, false, resumePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Resume struct: %s", err)
	}

	if err = resume.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Resume: %s", err)
	}

	count, err = Resumes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
