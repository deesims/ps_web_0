// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testGoauths(t *testing.T) {
	t.Parallel()

	query := Goauths(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testGoauthsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = goauth.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Goauths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGoauthsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Goauths(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Goauths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGoauthsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GoauthSlice{goauth}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Goauths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testGoauthsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := GoauthExists(tx, goauth.Username)
	if err != nil {
		t.Errorf("Unable to check if Goauth exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GoauthExistsG to return true, but got false.")
	}
}
func testGoauthsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	goauthFound, err := FindGoauth(tx, goauth.Username)
	if err != nil {
		t.Error(err)
	}

	if goauthFound == nil {
		t.Error("want a record, got nil")
	}
}
func testGoauthsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Goauths(tx).Bind(goauth); err != nil {
		t.Error(err)
	}
}

func testGoauthsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Goauths(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGoauthsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauthOne := &Goauth{}
	goauthTwo := &Goauth{}
	if err = randomize.Struct(seed, goauthOne, goauthDBTypes, false, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}
	if err = randomize.Struct(seed, goauthTwo, goauthDBTypes, false, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauthOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = goauthTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Goauths(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGoauthsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	goauthOne := &Goauth{}
	goauthTwo := &Goauth{}
	if err = randomize.Struct(seed, goauthOne, goauthDBTypes, false, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}
	if err = randomize.Struct(seed, goauthTwo, goauthDBTypes, false, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauthOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = goauthTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Goauths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func goauthBeforeInsertHook(e boil.Executor, o *Goauth) error {
	*o = Goauth{}
	return nil
}

func goauthAfterInsertHook(e boil.Executor, o *Goauth) error {
	*o = Goauth{}
	return nil
}

func goauthAfterSelectHook(e boil.Executor, o *Goauth) error {
	*o = Goauth{}
	return nil
}

func goauthBeforeUpdateHook(e boil.Executor, o *Goauth) error {
	*o = Goauth{}
	return nil
}

func goauthAfterUpdateHook(e boil.Executor, o *Goauth) error {
	*o = Goauth{}
	return nil
}

func goauthBeforeDeleteHook(e boil.Executor, o *Goauth) error {
	*o = Goauth{}
	return nil
}

func goauthAfterDeleteHook(e boil.Executor, o *Goauth) error {
	*o = Goauth{}
	return nil
}

func goauthBeforeUpsertHook(e boil.Executor, o *Goauth) error {
	*o = Goauth{}
	return nil
}

func goauthAfterUpsertHook(e boil.Executor, o *Goauth) error {
	*o = Goauth{}
	return nil
}

func testGoauthsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Goauth{}
	o := &Goauth{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, goauthDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Goauth object: %s", err)
	}

	AddGoauthHook(boil.BeforeInsertHook, goauthBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	goauthBeforeInsertHooks = []GoauthHook{}

	AddGoauthHook(boil.AfterInsertHook, goauthAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	goauthAfterInsertHooks = []GoauthHook{}

	AddGoauthHook(boil.AfterSelectHook, goauthAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	goauthAfterSelectHooks = []GoauthHook{}

	AddGoauthHook(boil.BeforeUpdateHook, goauthBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	goauthBeforeUpdateHooks = []GoauthHook{}

	AddGoauthHook(boil.AfterUpdateHook, goauthAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	goauthAfterUpdateHooks = []GoauthHook{}

	AddGoauthHook(boil.BeforeDeleteHook, goauthBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	goauthBeforeDeleteHooks = []GoauthHook{}

	AddGoauthHook(boil.AfterDeleteHook, goauthAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	goauthAfterDeleteHooks = []GoauthHook{}

	AddGoauthHook(boil.BeforeUpsertHook, goauthBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	goauthBeforeUpsertHooks = []GoauthHook{}

	AddGoauthHook(boil.AfterUpsertHook, goauthAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	goauthAfterUpsertHooks = []GoauthHook{}
}
func testGoauthsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Goauths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGoauthsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx, goauthColumns...); err != nil {
		t.Error(err)
	}

	count, err := Goauths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGoauthsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = goauth.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGoauthsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GoauthSlice{goauth}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testGoauthsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Goauths(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	goauthDBTypes = map[string]string{`Email`: `character varying`, `Hash`: `character varying`, `Role`: `character varying`, `Username`: `character varying`}
	_             = bytes.MinRead
)

func testGoauthsUpdate(t *testing.T) {
	t.Parallel()

	if len(goauthColumns) == len(goauthPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Goauths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, goauth, goauthDBTypes, true, goauthColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	if err = goauth.Update(tx); err != nil {
		t.Error(err)
	}
}

func testGoauthsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(goauthColumns) == len(goauthPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	goauth := &Goauth{}
	if err = randomize.Struct(seed, goauth, goauthDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Goauths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, goauth, goauthDBTypes, true, goauthPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(goauthColumns, goauthPrimaryKeyColumns) {
		fields = goauthColumns
	} else {
		fields = strmangle.SetComplement(
			goauthColumns,
			goauthPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(goauth))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := GoauthSlice{goauth}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testGoauthsUpsert(t *testing.T) {
	t.Parallel()

	if len(goauthColumns) == len(goauthPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	goauth := Goauth{}
	if err = randomize.Struct(seed, &goauth, goauthDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = goauth.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Goauth: %s", err)
	}

	count, err := Goauths(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &goauth, goauthDBTypes, false, goauthPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Goauth struct: %s", err)
	}

	if err = goauth.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Goauth: %s", err)
	}

	count, err = Goauths(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
