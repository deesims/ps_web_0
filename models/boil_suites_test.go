// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Companies", testCompanies)
	t.Run("Students", testStudents)
	t.Run("Jobs", testJobs)
	t.Run("Resumes", testResumes)
	t.Run("ResumeReviews", testResumeReviews)
	t.Run("WorksFors", testWorksFors)
	t.Run("WorkReviews", testWorkReviews)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Companies", testCompaniesDelete)
	t.Run("Students", testStudentsDelete)
	t.Run("Jobs", testJobsDelete)
	t.Run("Resumes", testResumesDelete)
	t.Run("ResumeReviews", testResumeReviewsDelete)
	t.Run("WorksFors", testWorksForsDelete)
	t.Run("WorkReviews", testWorkReviewsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Companies", testCompaniesQueryDeleteAll)
	t.Run("Students", testStudentsQueryDeleteAll)
	t.Run("Jobs", testJobsQueryDeleteAll)
	t.Run("Resumes", testResumesQueryDeleteAll)
	t.Run("ResumeReviews", testResumeReviewsQueryDeleteAll)
	t.Run("WorksFors", testWorksForsQueryDeleteAll)
	t.Run("WorkReviews", testWorkReviewsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Companies", testCompaniesSliceDeleteAll)
	t.Run("Students", testStudentsSliceDeleteAll)
	t.Run("Jobs", testJobsSliceDeleteAll)
	t.Run("Resumes", testResumesSliceDeleteAll)
	t.Run("ResumeReviews", testResumeReviewsSliceDeleteAll)
	t.Run("WorksFors", testWorksForsSliceDeleteAll)
	t.Run("WorkReviews", testWorkReviewsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Companies", testCompaniesExists)
	t.Run("Students", testStudentsExists)
	t.Run("Jobs", testJobsExists)
	t.Run("Resumes", testResumesExists)
	t.Run("ResumeReviews", testResumeReviewsExists)
	t.Run("WorksFors", testWorksForsExists)
	t.Run("WorkReviews", testWorkReviewsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Companies", testCompaniesFind)
	t.Run("Students", testStudentsFind)
	t.Run("Jobs", testJobsFind)
	t.Run("Resumes", testResumesFind)
	t.Run("ResumeReviews", testResumeReviewsFind)
	t.Run("WorksFors", testWorksForsFind)
	t.Run("WorkReviews", testWorkReviewsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Companies", testCompaniesBind)
	t.Run("Students", testStudentsBind)
	t.Run("Jobs", testJobsBind)
	t.Run("Resumes", testResumesBind)
	t.Run("ResumeReviews", testResumeReviewsBind)
	t.Run("WorksFors", testWorksForsBind)
	t.Run("WorkReviews", testWorkReviewsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Companies", testCompaniesOne)
	t.Run("Students", testStudentsOne)
	t.Run("Jobs", testJobsOne)
	t.Run("Resumes", testResumesOne)
	t.Run("ResumeReviews", testResumeReviewsOne)
	t.Run("WorksFors", testWorksForsOne)
	t.Run("WorkReviews", testWorkReviewsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Companies", testCompaniesAll)
	t.Run("Students", testStudentsAll)
	t.Run("Jobs", testJobsAll)
	t.Run("Resumes", testResumesAll)
	t.Run("ResumeReviews", testResumeReviewsAll)
	t.Run("WorksFors", testWorksForsAll)
	t.Run("WorkReviews", testWorkReviewsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Companies", testCompaniesCount)
	t.Run("Students", testStudentsCount)
	t.Run("Jobs", testJobsCount)
	t.Run("Resumes", testResumesCount)
	t.Run("ResumeReviews", testResumeReviewsCount)
	t.Run("WorksFors", testWorksForsCount)
	t.Run("WorkReviews", testWorkReviewsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Companies", testCompaniesHooks)
	t.Run("Students", testStudentsHooks)
	t.Run("Jobs", testJobsHooks)
	t.Run("Resumes", testResumesHooks)
	t.Run("ResumeReviews", testResumeReviewsHooks)
	t.Run("WorksFors", testWorksForsHooks)
	t.Run("WorkReviews", testWorkReviewsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Companies", testCompaniesInsert)
	t.Run("Companies", testCompaniesInsertWhitelist)
	t.Run("Students", testStudentsInsert)
	t.Run("Students", testStudentsInsertWhitelist)
	t.Run("Jobs", testJobsInsert)
	t.Run("Jobs", testJobsInsertWhitelist)
	t.Run("Resumes", testResumesInsert)
	t.Run("Resumes", testResumesInsertWhitelist)
	t.Run("ResumeReviews", testResumeReviewsInsert)
	t.Run("ResumeReviews", testResumeReviewsInsertWhitelist)
	t.Run("WorksFors", testWorksForsInsert)
	t.Run("WorksFors", testWorksForsInsertWhitelist)
	t.Run("WorkReviews", testWorkReviewsInsert)
	t.Run("WorkReviews", testWorkReviewsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("StudentToUserUsingUser", testStudentToOneUserUsingUser)
	t.Run("JobToCompanyUsingCompany", testJobToOneCompanyUsingCompany)
	t.Run("ResumeToUserUsingAuthor", testResumeToOneUserUsingAuthor)
	t.Run("ResumeReviewToUserUsingModerator", testResumeReviewToOneUserUsingModerator)
	t.Run("WorksForToUserUsingUser", testWorksForToOneUserUsingUser)
	t.Run("WorksForToJobUsingJob", testWorksForToOneJobUsingJob)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("UserToStudentUsingStudent", testUserOneToOneStudentUsingStudent)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CompanyToJobs", testCompanyToManyJobs)
	t.Run("JobToWorksFors", testJobToManyWorksFors)
	t.Run("UserToAuthorResumes", testUserToManyAuthorResumes)
	t.Run("UserToModeratorResumeReviews", testUserToManyModeratorResumeReviews)
	t.Run("UserToWorksFors", testUserToManyWorksFors)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("StudentToUserUsingUser", testStudentToOneSetOpUserUsingUser)
	t.Run("JobToCompanyUsingCompany", testJobToOneSetOpCompanyUsingCompany)
	t.Run("ResumeToUserUsingAuthor", testResumeToOneSetOpUserUsingAuthor)
	t.Run("ResumeReviewToUserUsingModerator", testResumeReviewToOneSetOpUserUsingModerator)
	t.Run("WorksForToUserUsingUser", testWorksForToOneSetOpUserUsingUser)
	t.Run("WorksForToJobUsingJob", testWorksForToOneSetOpJobUsingJob)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("UserToStudentUsingStudent", testUserOneToOneSetOpStudentUsingStudent)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CompanyToJobs", testCompanyToManyAddOpJobs)
	t.Run("JobToWorksFors", testJobToManyAddOpWorksFors)
	t.Run("UserToAuthorResumes", testUserToManyAddOpAuthorResumes)
	t.Run("UserToModeratorResumeReviews", testUserToManyAddOpModeratorResumeReviews)
	t.Run("UserToWorksFors", testUserToManyAddOpWorksFors)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Companies", testCompaniesReload)
	t.Run("Students", testStudentsReload)
	t.Run("Jobs", testJobsReload)
	t.Run("Resumes", testResumesReload)
	t.Run("ResumeReviews", testResumeReviewsReload)
	t.Run("WorksFors", testWorksForsReload)
	t.Run("WorkReviews", testWorkReviewsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Companies", testCompaniesReloadAll)
	t.Run("Students", testStudentsReloadAll)
	t.Run("Jobs", testJobsReloadAll)
	t.Run("Resumes", testResumesReloadAll)
	t.Run("ResumeReviews", testResumeReviewsReloadAll)
	t.Run("WorksFors", testWorksForsReloadAll)
	t.Run("WorkReviews", testWorkReviewsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Companies", testCompaniesSelect)
	t.Run("Students", testStudentsSelect)
	t.Run("Jobs", testJobsSelect)
	t.Run("Resumes", testResumesSelect)
	t.Run("ResumeReviews", testResumeReviewsSelect)
	t.Run("WorksFors", testWorksForsSelect)
	t.Run("WorkReviews", testWorkReviewsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Companies", testCompaniesUpdate)
	t.Run("Students", testStudentsUpdate)
	t.Run("Jobs", testJobsUpdate)
	t.Run("Resumes", testResumesUpdate)
	t.Run("ResumeReviews", testResumeReviewsUpdate)
	t.Run("WorksFors", testWorksForsUpdate)
	t.Run("WorkReviews", testWorkReviewsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Companies", testCompaniesSliceUpdateAll)
	t.Run("Students", testStudentsSliceUpdateAll)
	t.Run("Jobs", testJobsSliceUpdateAll)
	t.Run("Resumes", testResumesSliceUpdateAll)
	t.Run("ResumeReviews", testResumeReviewsSliceUpdateAll)
	t.Run("WorksFors", testWorksForsSliceUpdateAll)
	t.Run("WorkReviews", testWorkReviewsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Companies", testCompaniesUpsert)
	t.Run("Students", testStudentsUpsert)
	t.Run("Jobs", testJobsUpsert)
	t.Run("Resumes", testResumesUpsert)
	t.Run("ResumeReviews", testResumeReviewsUpsert)
	t.Run("WorksFors", testWorksForsUpsert)
	t.Run("WorkReviews", testWorkReviewsUpsert)
	t.Run("Users", testUsersUpsert)
}
