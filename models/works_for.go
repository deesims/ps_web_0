// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// WorksFor is an object representing the database table.
type WorksFor struct {
	JobID     float64   `boil:"job_id" json:"job_id" toml:"job_id" yaml:"job_id"`
	UserID    float64   `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	StartDate time.Time `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate   time.Time `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`

	R *worksForR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L worksForL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// worksForR is where relationships are stored.
type worksForR struct {
	User *User
	Job  *Job
}

// worksForL is where Load methods for each relationship are stored.
type worksForL struct{}

var (
	worksForColumns               = []string{"job_id", "user_id", "start_date", "end_date"}
	worksForColumnsWithoutDefault = []string{"job_id", "user_id", "start_date", "end_date"}
	worksForColumnsWithDefault    = []string{}
	worksForPrimaryKeyColumns     = []string{"job_id", "user_id"}
)

type (
	// WorksForSlice is an alias for a slice of pointers to WorksFor.
	// This should generally be used opposed to []WorksFor.
	WorksForSlice []*WorksFor
	// WorksForHook is the signature for custom WorksFor hook methods
	WorksForHook func(boil.Executor, *WorksFor) error

	worksForQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	worksForType                 = reflect.TypeOf(&WorksFor{})
	worksForMapping              = queries.MakeStructMapping(worksForType)
	worksForPrimaryKeyMapping, _ = queries.BindMapping(worksForType, worksForMapping, worksForPrimaryKeyColumns)
	worksForInsertCacheMut       sync.RWMutex
	worksForInsertCache          = make(map[string]insertCache)
	worksForUpdateCacheMut       sync.RWMutex
	worksForUpdateCache          = make(map[string]updateCache)
	worksForUpsertCacheMut       sync.RWMutex
	worksForUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var worksForBeforeInsertHooks []WorksForHook
var worksForBeforeUpdateHooks []WorksForHook
var worksForBeforeDeleteHooks []WorksForHook
var worksForBeforeUpsertHooks []WorksForHook

var worksForAfterInsertHooks []WorksForHook
var worksForAfterSelectHooks []WorksForHook
var worksForAfterUpdateHooks []WorksForHook
var worksForAfterDeleteHooks []WorksForHook
var worksForAfterUpsertHooks []WorksForHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WorksFor) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range worksForBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WorksFor) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range worksForBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WorksFor) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range worksForBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WorksFor) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range worksForBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WorksFor) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range worksForAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WorksFor) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range worksForAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WorksFor) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range worksForAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WorksFor) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range worksForAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WorksFor) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range worksForAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWorksForHook registers your hook function for all future operations.
func AddWorksForHook(hookPoint boil.HookPoint, worksForHook WorksForHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		worksForBeforeInsertHooks = append(worksForBeforeInsertHooks, worksForHook)
	case boil.BeforeUpdateHook:
		worksForBeforeUpdateHooks = append(worksForBeforeUpdateHooks, worksForHook)
	case boil.BeforeDeleteHook:
		worksForBeforeDeleteHooks = append(worksForBeforeDeleteHooks, worksForHook)
	case boil.BeforeUpsertHook:
		worksForBeforeUpsertHooks = append(worksForBeforeUpsertHooks, worksForHook)
	case boil.AfterInsertHook:
		worksForAfterInsertHooks = append(worksForAfterInsertHooks, worksForHook)
	case boil.AfterSelectHook:
		worksForAfterSelectHooks = append(worksForAfterSelectHooks, worksForHook)
	case boil.AfterUpdateHook:
		worksForAfterUpdateHooks = append(worksForAfterUpdateHooks, worksForHook)
	case boil.AfterDeleteHook:
		worksForAfterDeleteHooks = append(worksForAfterDeleteHooks, worksForHook)
	case boil.AfterUpsertHook:
		worksForAfterUpsertHooks = append(worksForAfterUpsertHooks, worksForHook)
	}
}

// OneP returns a single worksFor record from the query, and panics on error.
func (q worksForQuery) OneP() *WorksFor {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single worksFor record from the query.
func (q worksForQuery) One() (*WorksFor, error) {
	o := &WorksFor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for works_for")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all WorksFor records from the query, and panics on error.
func (q worksForQuery) AllP() WorksForSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all WorksFor records from the query.
func (q worksForQuery) All() (WorksForSlice, error) {
	var o WorksForSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WorksFor slice")
	}

	if len(worksForAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all WorksFor records in the query, and panics on error.
func (q worksForQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all WorksFor records in the query.
func (q worksForQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count works_for rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q worksForQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q worksForQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if works_for exists")
	}

	return count > 0, nil
}

// UserG pointed to by the foreign key.
func (o *WorksFor) UserG(mods ...qm.QueryMod) userQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *WorksFor) User(exec boil.Executor, mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user\"")

	return query
}

// JobG pointed to by the foreign key.
func (o *WorksFor) JobG(mods ...qm.QueryMod) jobQuery {
	return o.Job(boil.GetDB(), mods...)
}

// Job pointed to by the foreign key.
func (o *WorksFor) Job(exec boil.Executor, mods ...qm.QueryMod) jobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("job_id=?", o.JobID),
	}

	queryMods = append(queryMods, mods...)

	query := Jobs(exec, queryMods...)
	queries.SetFrom(query.Query, "\"job\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (worksForL) LoadUser(e boil.Executor, singular bool, maybeWorksFor interface{}) error {
	var slice []*WorksFor
	var object *WorksFor

	count := 1
	if singular {
		object = maybeWorksFor.(*WorksFor)
	} else {
		slice = *maybeWorksFor.(*WorksForSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &worksForR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &worksForR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}
	defer results.Close()

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if len(worksForAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// LoadJob allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (worksForL) LoadJob(e boil.Executor, singular bool, maybeWorksFor interface{}) error {
	var slice []*WorksFor
	var object *WorksFor

	count := 1
	if singular {
		object = maybeWorksFor.(*WorksFor)
	} else {
		slice = *maybeWorksFor.(*WorksForSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &worksForR{}
		}
		args[0] = object.JobID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &worksForR{}
			}
			args[i] = obj.JobID
		}
	}

	query := fmt.Sprintf(
		"select * from \"job\" where \"job_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Job")
	}
	defer results.Close()

	var resultSlice []*Job
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Job")
	}

	if len(worksForAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Job = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.JobID == foreign.JobID {
				local.R.Job = foreign
				break
			}
		}
	}

	return nil
}

// SetUserG of the works_for to the related item.
// Sets o.R.User to related.
// Adds o to related.R.WorksFors.
// Uses the global database handle.
func (o *WorksFor) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the works_for to the related item.
// Sets o.R.User to related.
// Adds o to related.R.WorksFors.
// Panics on error.
func (o *WorksFor) SetUserP(exec boil.Executor, insert bool, related *User) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the works_for to the related item.
// Sets o.R.User to related.
// Adds o to related.R.WorksFors.
// Uses the global database handle and panics on error.
func (o *WorksFor) SetUserGP(insert bool, related *User) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the works_for to the related item.
// Sets o.R.User to related.
// Adds o to related.R.WorksFors.
func (o *WorksFor) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"works_for\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, worksForPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.JobID, o.UserID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID

	if o.R == nil {
		o.R = &worksForR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			WorksFors: WorksForSlice{o},
		}
	} else {
		related.R.WorksFors = append(related.R.WorksFors, o)
	}

	return nil
}

// SetJobG of the works_for to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.WorksFors.
// Uses the global database handle.
func (o *WorksFor) SetJobG(insert bool, related *Job) error {
	return o.SetJob(boil.GetDB(), insert, related)
}

// SetJobP of the works_for to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.WorksFors.
// Panics on error.
func (o *WorksFor) SetJobP(exec boil.Executor, insert bool, related *Job) {
	if err := o.SetJob(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetJobGP of the works_for to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.WorksFors.
// Uses the global database handle and panics on error.
func (o *WorksFor) SetJobGP(insert bool, related *Job) {
	if err := o.SetJob(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetJob of the works_for to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.WorksFors.
func (o *WorksFor) SetJob(exec boil.Executor, insert bool, related *Job) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"works_for\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"job_id"}),
		strmangle.WhereClause("\"", "\"", 2, worksForPrimaryKeyColumns),
	)
	values := []interface{}{related.JobID, o.JobID, o.UserID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.JobID = related.JobID

	if o.R == nil {
		o.R = &worksForR{
			Job: related,
		}
	} else {
		o.R.Job = related
	}

	if related.R == nil {
		related.R = &jobR{
			WorksFors: WorksForSlice{o},
		}
	} else {
		related.R.WorksFors = append(related.R.WorksFors, o)
	}

	return nil
}

// WorksForsG retrieves all records.
func WorksForsG(mods ...qm.QueryMod) worksForQuery {
	return WorksFors(boil.GetDB(), mods...)
}

// WorksFors retrieves all the records using an executor.
func WorksFors(exec boil.Executor, mods ...qm.QueryMod) worksForQuery {
	mods = append(mods, qm.From("\"works_for\""))
	return worksForQuery{NewQuery(exec, mods...)}
}

// FindWorksForG retrieves a single record by ID.
func FindWorksForG(jobID float64, userID float64, selectCols ...string) (*WorksFor, error) {
	return FindWorksFor(boil.GetDB(), jobID, userID, selectCols...)
}

// FindWorksForGP retrieves a single record by ID, and panics on error.
func FindWorksForGP(jobID float64, userID float64, selectCols ...string) *WorksFor {
	retobj, err := FindWorksFor(boil.GetDB(), jobID, userID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindWorksFor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWorksFor(exec boil.Executor, jobID float64, userID float64, selectCols ...string) (*WorksFor, error) {
	worksForObj := &WorksFor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"works_for\" where \"job_id\"=$1 AND \"user_id\"=$2", sel,
	)

	q := queries.Raw(exec, query, jobID, userID)

	err := q.Bind(worksForObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from works_for")
	}

	return worksForObj, nil
}

// FindWorksForP retrieves a single record by ID with an executor, and panics on error.
func FindWorksForP(exec boil.Executor, jobID float64, userID float64, selectCols ...string) *WorksFor {
	retobj, err := FindWorksFor(exec, jobID, userID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *WorksFor) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *WorksFor) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *WorksFor) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *WorksFor) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no works_for provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(worksForColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	worksForInsertCacheMut.RLock()
	cache, cached := worksForInsertCache[key]
	worksForInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			worksForColumns,
			worksForColumnsWithDefault,
			worksForColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(worksForType, worksForMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(worksForType, worksForMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"works_for\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"works_for\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into works_for")
	}

	if !cached {
		worksForInsertCacheMut.Lock()
		worksForInsertCache[key] = cache
		worksForInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single WorksFor record. See Update for
// whitelist behavior description.
func (o *WorksFor) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single WorksFor record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *WorksFor) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the WorksFor, and panics on error.
// See Update for whitelist behavior description.
func (o *WorksFor) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the WorksFor.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *WorksFor) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	worksForUpdateCacheMut.RLock()
	cache, cached := worksForUpdateCache[key]
	worksForUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(worksForColumns, worksForPrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update works_for, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"works_for\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, worksForPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(worksForType, worksForMapping, append(wl, worksForPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update works_for row")
	}

	if !cached {
		worksForUpdateCacheMut.Lock()
		worksForUpdateCache[key] = cache
		worksForUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q worksForQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q worksForQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for works_for")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o WorksForSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o WorksForSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o WorksForSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WorksForSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), worksForPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE \"works_for\" SET %s WHERE (\"job_id\",\"user_id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(worksForPrimaryKeyColumns), len(colNames)+1, len(worksForPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in worksFor slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *WorksFor) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *WorksFor) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *WorksFor) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *WorksFor) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no works_for provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(worksForColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	worksForUpsertCacheMut.RLock()
	cache, cached := worksForUpsertCache[key]
	worksForUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			worksForColumns,
			worksForColumnsWithDefault,
			worksForColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			worksForColumns,
			worksForPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert works_for, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(worksForPrimaryKeyColumns))
			copy(conflict, worksForPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"works_for\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(worksForType, worksForMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(worksForType, worksForMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert works_for")
	}

	if !cached {
		worksForUpsertCacheMut.Lock()
		worksForUpsertCache[key] = cache
		worksForUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single WorksFor record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *WorksFor) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single WorksFor record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *WorksFor) DeleteG() error {
	if o == nil {
		return errors.New("models: no WorksFor provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single WorksFor record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *WorksFor) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single WorksFor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WorksFor) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no WorksFor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), worksForPrimaryKeyMapping)
	sql := "DELETE FROM \"works_for\" WHERE \"job_id\"=$1 AND \"user_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from works_for")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q worksForQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q worksForQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no worksForQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from works_for")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o WorksForSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o WorksForSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no WorksFor slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o WorksForSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WorksForSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no WorksFor slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(worksForBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), worksForPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM \"works_for\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, worksForPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(worksForPrimaryKeyColumns), 1, len(worksForPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from worksFor slice")
	}

	if len(worksForAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *WorksFor) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *WorksFor) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *WorksFor) ReloadG() error {
	if o == nil {
		return errors.New("models: no WorksFor provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WorksFor) Reload(exec boil.Executor) error {
	ret, err := FindWorksFor(exec, o.JobID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *WorksForSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *WorksForSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorksForSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty WorksForSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorksForSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	worksFors := WorksForSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), worksForPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT \"works_for\".* FROM \"works_for\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, worksForPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(worksForPrimaryKeyColumns), 1, len(worksForPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&worksFors)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WorksForSlice")
	}

	*o = worksFors

	return nil
}

// WorksForExists checks if the WorksFor row exists.
func WorksForExists(exec boil.Executor, jobID float64, userID float64) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from \"works_for\" where \"job_id\"=$1 AND \"user_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, jobID, userID)
	}

	row := exec.QueryRow(sql, jobID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if works_for exists")
	}

	return exists, nil
}

// WorksForExistsG checks if the WorksFor row exists.
func WorksForExistsG(jobID float64, userID float64) (bool, error) {
	return WorksForExists(boil.GetDB(), jobID, userID)
}

// WorksForExistsGP checks if the WorksFor row exists. Panics on error.
func WorksForExistsGP(jobID float64, userID float64) bool {
	e, err := WorksForExists(boil.GetDB(), jobID, userID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// WorksForExistsP checks if the WorksFor row exists. Panics on error.
func WorksForExistsP(exec boil.Executor, jobID float64, userID float64) bool {
	e, err := WorksForExists(exec, jobID, userID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
