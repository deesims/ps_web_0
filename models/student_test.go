// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testStudents(t *testing.T) {
	t.Parallel()

	query := Students(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testStudentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = student.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Students(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := StudentSlice{student}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testStudentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := StudentExists(tx, student.UserID)
	if err != nil {
		t.Errorf("Unable to check if Student exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StudentExistsG to return true, but got false.")
	}
}
func testStudentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	studentFound, err := FindStudent(tx, student.UserID)
	if err != nil {
		t.Error(err)
	}

	if studentFound == nil {
		t.Error("want a record, got nil")
	}
}
func testStudentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Students(tx).Bind(student); err != nil {
		t.Error(err)
	}
}

func testStudentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Students(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStudentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	studentOne := &Student{}
	studentTwo := &Student{}
	if err = randomize.Struct(seed, studentOne, studentDBTypes, false, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}
	if err = randomize.Struct(seed, studentTwo, studentDBTypes, false, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = studentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = studentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Students(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStudentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	studentOne := &Student{}
	studentTwo := &Student{}
	if err = randomize.Struct(seed, studentOne, studentDBTypes, false, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}
	if err = randomize.Struct(seed, studentTwo, studentDBTypes, false, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = studentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = studentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func studentBeforeInsertHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentAfterInsertHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentAfterSelectHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentBeforeUpdateHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentAfterUpdateHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentBeforeDeleteHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentAfterDeleteHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentBeforeUpsertHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentAfterUpsertHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func testStudentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Student{}
	o := &Student{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, studentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Student object: %s", err)
	}

	AddStudentHook(boil.BeforeInsertHook, studentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	studentBeforeInsertHooks = []StudentHook{}

	AddStudentHook(boil.AfterInsertHook, studentAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	studentAfterInsertHooks = []StudentHook{}

	AddStudentHook(boil.AfterSelectHook, studentAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	studentAfterSelectHooks = []StudentHook{}

	AddStudentHook(boil.BeforeUpdateHook, studentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	studentBeforeUpdateHooks = []StudentHook{}

	AddStudentHook(boil.AfterUpdateHook, studentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	studentAfterUpdateHooks = []StudentHook{}

	AddStudentHook(boil.BeforeDeleteHook, studentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	studentBeforeDeleteHooks = []StudentHook{}

	AddStudentHook(boil.AfterDeleteHook, studentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	studentAfterDeleteHooks = []StudentHook{}

	AddStudentHook(boil.BeforeUpsertHook, studentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	studentBeforeUpsertHooks = []StudentHook{}

	AddStudentHook(boil.AfterUpsertHook, studentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	studentAfterUpsertHooks = []StudentHook{}
}
func testStudentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx, studentColumns...); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudentToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Student
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	slice := StudentSlice{&local}
	if err = local.L.LoadUser(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStudentToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Student != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := StudentExists(tx, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testStudentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = student.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testStudentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := StudentSlice{student}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testStudentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Students(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	studentDBTypes = map[string]string{`Program`: `character varying`, `SchoolEndDate`: `date`, `SchoolStartDate`: `date`, `StudentLevel`: `integer`, `UserID`: `numeric`}
	_              = bytes.MinRead
)

func testStudentsUpdate(t *testing.T) {
	t.Parallel()

	if len(studentColumns) == len(studentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	if err = student.Update(tx); err != nil {
		t.Error(err)
	}
}

func testStudentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(studentColumns) == len(studentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, student, studentDBTypes, true, studentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(studentColumns, studentPrimaryKeyColumns) {
		fields = studentColumns
	} else {
		fields = strmangle.SetComplement(
			studentColumns,
			studentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(student))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := StudentSlice{student}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testStudentsUpsert(t *testing.T) {
	t.Parallel()

	if len(studentColumns) == len(studentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	student := Student{}
	if err = randomize.Struct(seed, &student, studentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Student: %s", err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &student, studentDBTypes, false, studentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	if err = student.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Student: %s", err)
	}

	count, err = Students(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
