// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Goauth is an object representing the database table.
type Goauth struct {
	Username string      `boil:"username" json:"username" toml:"username" yaml:"username"`
	Email    null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Hash     null.String `boil:"hash" json:"hash,omitempty" toml:"hash" yaml:"hash,omitempty"`
	Role     null.String `boil:"role" json:"role,omitempty" toml:"role" yaml:"role,omitempty"`

	R *goauthR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goauthL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// goauthR is where relationships are stored.
type goauthR struct {
}

// goauthL is where Load methods for each relationship are stored.
type goauthL struct{}

var (
	goauthColumns               = []string{"username", "email", "hash", "role"}
	goauthColumnsWithoutDefault = []string{"username", "email", "hash", "role"}
	goauthColumnsWithDefault    = []string{}
	goauthPrimaryKeyColumns     = []string{"username"}
)

type (
	// GoauthSlice is an alias for a slice of pointers to Goauth.
	// This should generally be used opposed to []Goauth.
	GoauthSlice []*Goauth
	// GoauthHook is the signature for custom Goauth hook methods
	GoauthHook func(boil.Executor, *Goauth) error

	goauthQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goauthType                 = reflect.TypeOf(&Goauth{})
	goauthMapping              = queries.MakeStructMapping(goauthType)
	goauthPrimaryKeyMapping, _ = queries.BindMapping(goauthType, goauthMapping, goauthPrimaryKeyColumns)
	goauthInsertCacheMut       sync.RWMutex
	goauthInsertCache          = make(map[string]insertCache)
	goauthUpdateCacheMut       sync.RWMutex
	goauthUpdateCache          = make(map[string]updateCache)
	goauthUpsertCacheMut       sync.RWMutex
	goauthUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var goauthBeforeInsertHooks []GoauthHook
var goauthBeforeUpdateHooks []GoauthHook
var goauthBeforeDeleteHooks []GoauthHook
var goauthBeforeUpsertHooks []GoauthHook

var goauthAfterInsertHooks []GoauthHook
var goauthAfterSelectHooks []GoauthHook
var goauthAfterUpdateHooks []GoauthHook
var goauthAfterDeleteHooks []GoauthHook
var goauthAfterUpsertHooks []GoauthHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Goauth) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range goauthBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Goauth) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range goauthBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Goauth) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range goauthBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Goauth) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range goauthBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Goauth) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range goauthAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Goauth) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range goauthAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Goauth) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range goauthAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Goauth) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range goauthAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Goauth) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range goauthAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoauthHook registers your hook function for all future operations.
func AddGoauthHook(hookPoint boil.HookPoint, goauthHook GoauthHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		goauthBeforeInsertHooks = append(goauthBeforeInsertHooks, goauthHook)
	case boil.BeforeUpdateHook:
		goauthBeforeUpdateHooks = append(goauthBeforeUpdateHooks, goauthHook)
	case boil.BeforeDeleteHook:
		goauthBeforeDeleteHooks = append(goauthBeforeDeleteHooks, goauthHook)
	case boil.BeforeUpsertHook:
		goauthBeforeUpsertHooks = append(goauthBeforeUpsertHooks, goauthHook)
	case boil.AfterInsertHook:
		goauthAfterInsertHooks = append(goauthAfterInsertHooks, goauthHook)
	case boil.AfterSelectHook:
		goauthAfterSelectHooks = append(goauthAfterSelectHooks, goauthHook)
	case boil.AfterUpdateHook:
		goauthAfterUpdateHooks = append(goauthAfterUpdateHooks, goauthHook)
	case boil.AfterDeleteHook:
		goauthAfterDeleteHooks = append(goauthAfterDeleteHooks, goauthHook)
	case boil.AfterUpsertHook:
		goauthAfterUpsertHooks = append(goauthAfterUpsertHooks, goauthHook)
	}
}

// OneP returns a single goauth record from the query, and panics on error.
func (q goauthQuery) OneP() *Goauth {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single goauth record from the query.
func (q goauthQuery) One() (*Goauth, error) {
	o := &Goauth{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for goauth")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Goauth records from the query, and panics on error.
func (q goauthQuery) AllP() GoauthSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Goauth records from the query.
func (q goauthQuery) All() (GoauthSlice, error) {
	var o GoauthSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Goauth slice")
	}

	if len(goauthAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Goauth records in the query, and panics on error.
func (q goauthQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Goauth records in the query.
func (q goauthQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count goauth rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q goauthQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q goauthQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if goauth exists")
	}

	return count > 0, nil
}

// GoauthsG retrieves all records.
func GoauthsG(mods ...qm.QueryMod) goauthQuery {
	return Goauths(boil.GetDB(), mods...)
}

// Goauths retrieves all the records using an executor.
func Goauths(exec boil.Executor, mods ...qm.QueryMod) goauthQuery {
	mods = append(mods, qm.From("\"goauth\""))
	return goauthQuery{NewQuery(exec, mods...)}
}

// FindGoauthG retrieves a single record by ID.
func FindGoauthG(username string, selectCols ...string) (*Goauth, error) {
	return FindGoauth(boil.GetDB(), username, selectCols...)
}

// FindGoauthGP retrieves a single record by ID, and panics on error.
func FindGoauthGP(username string, selectCols ...string) *Goauth {
	retobj, err := FindGoauth(boil.GetDB(), username, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindGoauth retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoauth(exec boil.Executor, username string, selectCols ...string) (*Goauth, error) {
	goauthObj := &Goauth{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"goauth\" where \"username\"=$1", sel,
	)

	q := queries.Raw(exec, query, username)

	err := q.Bind(goauthObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from goauth")
	}

	return goauthObj, nil
}

// FindGoauthP retrieves a single record by ID with an executor, and panics on error.
func FindGoauthP(exec boil.Executor, username string, selectCols ...string) *Goauth {
	retobj, err := FindGoauth(exec, username, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Goauth) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Goauth) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Goauth) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Goauth) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no goauth provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goauthColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	goauthInsertCacheMut.RLock()
	cache, cached := goauthInsertCache[key]
	goauthInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			goauthColumns,
			goauthColumnsWithDefault,
			goauthColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(goauthType, goauthMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goauthType, goauthMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"goauth\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"goauth\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into goauth")
	}

	if !cached {
		goauthInsertCacheMut.Lock()
		goauthInsertCache[key] = cache
		goauthInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Goauth record. See Update for
// whitelist behavior description.
func (o *Goauth) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Goauth record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Goauth) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Goauth, and panics on error.
// See Update for whitelist behavior description.
func (o *Goauth) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Goauth.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Goauth) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	goauthUpdateCacheMut.RLock()
	cache, cached := goauthUpdateCache[key]
	goauthUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(goauthColumns, goauthPrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update goauth, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"goauth\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, goauthPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goauthType, goauthMapping, append(wl, goauthPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update goauth row")
	}

	if !cached {
		goauthUpdateCacheMut.Lock()
		goauthUpdateCache[key] = cache
		goauthUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q goauthQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q goauthQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for goauth")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GoauthSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o GoauthSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o GoauthSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoauthSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goauthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE \"goauth\" SET %s WHERE (\"username\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(goauthPrimaryKeyColumns), len(colNames)+1, len(goauthPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in goauth slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Goauth) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Goauth) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Goauth) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Goauth) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no goauth provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goauthColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goauthUpsertCacheMut.RLock()
	cache, cached := goauthUpsertCache[key]
	goauthUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			goauthColumns,
			goauthColumnsWithDefault,
			goauthColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			goauthColumns,
			goauthPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert goauth, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(goauthPrimaryKeyColumns))
			copy(conflict, goauthPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"goauth\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(goauthType, goauthMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goauthType, goauthMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert goauth")
	}

	if !cached {
		goauthUpsertCacheMut.Lock()
		goauthUpsertCache[key] = cache
		goauthUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Goauth record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Goauth) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Goauth record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Goauth) DeleteG() error {
	if o == nil {
		return errors.New("models: no Goauth provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Goauth record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Goauth) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Goauth record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Goauth) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Goauth provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goauthPrimaryKeyMapping)
	sql := "DELETE FROM \"goauth\" WHERE \"username\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from goauth")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q goauthQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q goauthQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no goauthQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from goauth")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o GoauthSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o GoauthSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Goauth slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o GoauthSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoauthSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Goauth slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(goauthBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goauthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM \"goauth\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, goauthPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(goauthPrimaryKeyColumns), 1, len(goauthPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from goauth slice")
	}

	if len(goauthAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Goauth) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Goauth) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Goauth) ReloadG() error {
	if o == nil {
		return errors.New("models: no Goauth provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Goauth) Reload(exec boil.Executor) error {
	ret, err := FindGoauth(exec, o.Username)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GoauthSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GoauthSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoauthSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty GoauthSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoauthSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	goauths := GoauthSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goauthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT \"goauth\".* FROM \"goauth\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, goauthPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(goauthPrimaryKeyColumns), 1, len(goauthPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&goauths)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GoauthSlice")
	}

	*o = goauths

	return nil
}

// GoauthExists checks if the Goauth row exists.
func GoauthExists(exec boil.Executor, username string) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from \"goauth\" where \"username\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, username)
	}

	row := exec.QueryRow(sql, username)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if goauth exists")
	}

	return exists, nil
}

// GoauthExistsG checks if the Goauth row exists.
func GoauthExistsG(username string) (bool, error) {
	return GoauthExists(boil.GetDB(), username)
}

// GoauthExistsGP checks if the Goauth row exists. Panics on error.
func GoauthExistsGP(username string) bool {
	e, err := GoauthExists(boil.GetDB(), username)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// GoauthExistsP checks if the Goauth row exists. Panics on error.
func GoauthExistsP(exec boil.Executor, username string) bool {
	e, err := GoauthExists(exec, username)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
